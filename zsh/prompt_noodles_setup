# Heavily stolen from a prompt I like called "paradox"
# üçú
#

# Define variables.
_prompt_noodles_current_bg='NONE'
_prompt_noodles_segment_separator='ÓÇ∞'
_prompt_noodles_start_time=$SECONDS

function prompt_noodles_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_noodles_current_bg" != 'NONE' && "$1" != "$_prompt_noodles_current_bg" ]]; then
    print -n " $bg%F{$_prompt_noodles_current_bg}$_prompt_noodles_segment_separator$fg "
  else
    print -n "$bg$fg "
  fi
  _prompt_noodles_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_noodles_end_segment {
  if [[ -n "$_prompt_noodles_current_bg" ]]; then
    print -n " %k%F{$_prompt_noodles_current_bg}$_prompt_noodles_segment_separator"
  else
    print -n "%k"
  fi
  print -n "%f"
  _prompt_noodles_current_bg=''
}

function prompt_noodles_build_prompt {
  local bg fg
  bg="black"
  fg="default"

  prompt_noodles_start_segment black default '%(?::%F{red}‚úò )%(!:%F{yellow}‚ö° :)%(1j:%F{cyan}‚öô :)%F{blue}%n%F{default}@%m%f'
  prompt_noodles_start_segment blue black '$_prompt_noodles_pwd'

  if [[ -n "$(node --version)" ]]; then
    prompt_noodles_start_segment black default '$_prompt_noodles_node'
  fi

  if [[ -n "$(ruby --version)" ]]; then
    prompt_noodles_start_segment blue black '$_prompt_noodles_ruby'
  fi

  if [[ -n "$(rustc --version)" ]]; then
    prompt_noodles_start_segment black default '$_prompt_noodles_rust'
  fi

  if [[ -n "$(elixir --version)" ]]; then
    prompt_noodles_start_segment black default '$_prompt_noodles_elixir'
  fi

  if [[ -n "$git_info" ]]; then
    prompt_noodles_start_segment blue black '${(e)git_info[ref]}${(e)git_info[status]}'
  fi

  prompt_noodles_end_segment
}

prompt_noodles_print_elapsed_time() {
  local end_time=$(( SECONDS - _prompt_noodles_start_time ))
  local hours minutes seconds remainder

  if (( end_time >= 3600 )); then
    hours=$(( end_time / 3600 ))
    remainder=$(( end_time % 3600 ))
    minutes=$(( remainder / 60 ))
    seconds=$(( remainder % 60 ))
    print -P "%B%F{red}>>> elapsed time ${hours}h${minutes}m${seconds}s%b"
  elif (( end_time >= 60 )); then
    minutes=$(( end_time / 60 ))
    seconds=$(( end_time % 60 ))
    print -P "%B%F{yellow}>>> elapsed time ${minutes}m${seconds}s%b"
  elif (( end_time > 2 )); then
    print -P "%B%F{green}>>> elapsed time ${end_time}s%b"
  fi
}

function prompt_noodles_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_noodles_pwd=$(prompt-pwd)

  _prompt_noodles_node="node $(node --version)"

  _prompt_noodles_ruby="$(ruby --version | grep -Eow 'ruby [0-9|.|a-z|A-Z]+')"

  # a regular express that took far too long to come up with,
  # parses `rustc --version` to give the version number and date of build
  # (removes the git hash for the build, there's probably a smarter way)
  _prompt_noodles_rust="$(rustc --version | sed -re 's/(rustc\ [0-9]+\.[0-9]+\.[0-9]+(\-|[a-z])*)\ \(([0-9]|[a-z])+\ ([0-9]+\-[0-9]+\-[0-9]+)\)/\1 \4/g')"

  _prompt_noodles_elixir="elixir $(elixir --version | grep -oP '[0-9]+\.[0-9]+\.[0-9]+')"

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi

  # Calculate and print the elapsed time.
  prompt_noodles_print_elapsed_time
}

function prompt_noodles_preexec {
  _prompt_noodles_start_time="$SECONDS"
}

function prompt_noodles_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook preexec prompt_noodles_preexec
  add-zsh-hook precmd prompt_noodles_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%B%F{blue}‚ùØ%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}‚ô∫%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}‚ùÆ%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ' ‚Åù %s'
  zstyle ':prezto:module:git:info:added' format ' ‚úö'
  zstyle ':prezto:module:git:info:ahead' format ' ‚¨Ü'
  zstyle ':prezto:module:git:info:behind' format ' ‚¨á'
  zstyle ':prezto:module:git:info:branch' format 'ÓÇ† %b'
  zstyle ':prezto:module:git:info:commit' format '‚û¶ %.7c'
  zstyle ':prezto:module:git:info:deleted' format ' ‚úñ'
  zstyle ':prezto:module:git:info:dirty' format ' ‚Åù'
  zstyle ':prezto:module:git:info:modified' format ' ‚ú±'
  zstyle ':prezto:module:git:info:position' format '%p'
  zstyle ':prezto:module:git:info:renamed' format ' ‚ûô'
  zstyle ':prezto:module:git:info:stashed' format ' S'
  zstyle ':prezto:module:git:info:unmerged' format ' ‚ïê'
  zstyle ':prezto:module:git:info:untracked' format ' ?'
  zstyle ':prezto:module:git:info:keys' format \
    'ref' '$(coalesce "%b" "%p" "%c")' \
    'status' '%s%D%A%B%S%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='
${(e)$(prompt_noodles_build_prompt)}
 ${editor_info[keymap]} '
  RPROMPT='%F{blue}[%F{default}%D{%H:%M:%S}%F{blue}]%f'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_noodles_setup "$@"
